searchState.loadedDescShard("hir_ty", 0, "The type system. We currently use this to infer types for …\nRepresents coercing a value to a different type of value.\nAbstract data types, i.e., structs, unions, or …\nThe id for an Abstract Data Type (i.e. structs, unions and …\nAn “alias” type represents some form of type alias, …\nType is equal to an alias.\nCreate a new anonymous lifetime parameter and reference it.\nGive a hard error when either <code>&amp;</code> or <code>&#39;_</code> is written. Used to …\nan array type like <code>[T; N]</code>\nGo from <code>*const [T; N]</code> to <code>*const T</code>\nGeneric arguments on an associated type, e.g. …\nan associated type like <code>Iterator::Item</code>; see <code>AssociatedType</code> …\nRepresents generic parameters and an item bound by them. …\nBinding modes inferred for patterns. …\nDiagnostics that come from types in the body.\nTake the address and produce either a <code>&amp;</code> or <code>*</code> pointer.\nIdentifies a particular bound variable within a binder. …\nReferences the binding at the given depth. The index is a […\nBound var (e.g. a parameter).\nThe “break type” of the visitor, often <code>()</code>. It …\nA function signature as seen by type inference: Several …\nThe <code>Cast</code> trait is used to make annoying upcasts between …\nA closure.\nGo from a non-capturing closure to an fn pointer or an …\nConcrete constant value.\nConstant argument\nA concrete constant value\nA concrete constant value\nA coroutine.\nA coroutine witness.\nReferences the binder at the given depth. The index is a de\nMay have a drop glue if some type parameter has it.\nA lint.\nDereference once, producing a place.\n<code>impl Trait</code> is disallowed and will be an error.\nA “dyn” type is a trait object type created via the “…\nReplace all anonymous lifetimes by provided lifetime.\nAn elided lifetimes was used (either implicitly, by not …\nSignal we cannot find which should be the anonymous …\nWhen there is a generic enum, within the expression …\nThis can be used to represent an error, e.g. during name …\na function definition\nforeign types\nA function type such as <code>for&lt;&#39;a&gt; fn(&amp;&#39;a u32)</code>. Note that “…\nInnermost index.\nType implements a trait.\nThe expected lifetimes &amp; types and consts counts can be …\nInfer all elided lifetimes.\nThe result of type inference: A mapping from expressions …\nInference variable defined in the current inference …\nConstant whose value is being inferred.\nLifetime argument\nOne lifetime outlives another.\nA constant can have reference to other things. Memory map …\nMutable\nGo from a mut raw pointer to a const raw pointer.\nWhether a type is mutable or not.\nthe never type <code>!</code>\nGo from ! to any type.\nImmutable\nOne level higher than the innermost index.\nAn opaque type.\n<code>impl Trait</code> gets lowered into an opaque type that doesn’t …\na placeholder for opaque types like <code>impl Trait</code>\nAn overloaded autoderef step, representing a …\nA path can have many generic arguments: each segment may …\ninstantiated from a universally quantified type, e.g., from\nLifetime on some yet-unknown placeholder.\nA polymorphic function signature.\nAn associated type projection.\na raw pointer type like <code>*const T</code> or <code>*mut T</code>\nConverts from T to *T.\na reference type like <code>&amp;T</code> or <code>&amp;mut T</code>\nConverts from T to &amp;T.\nGo from a fn-item type to a fn-pointer type.\nSafe\nWhether a function is safe or not.\nTypes of scalar values.\na scalar type like <code>bool</code> or <code>u32</code>\nGeneric arguments directly on the segment.\nDiagnostics that come from types in fn parameters/return …\na slice type like <code>[T]</code>\nResolves elided lifetimes to <code>&#39;static</code> if there are no other …\nthe string primitive type\nInterned list of generic arguments for an item. When an …\na tuple of the given arity\nType argument\nThis is a builder for <code>Ty</code> or anything that needs a …\nRepresents some extra knowledge we may have about the type …\nType outlives a lifetime.\nFor types where “visit” invokes a callback on the …\nApplies the given <code>visitor</code> to a value, producing a visited …\nA “visitor” recursively folds some term – that is, …\nCase of an unknown value that rustc might know but we don…\nCase of an unknown value that rustc might know but we don…\nUnsafe\nGo from a safe fn pointer to an unsafe fn pointer.\nUnsize a pointer/reference value, e.g., <code>&amp;[T; n]</code> to <code>&amp;[T]</code>. …\nReturns an iterator over the whole super trait hierarchy …\nCreates a <code>dyn</code> value from this visitor. Unfortunately, this …\nThe id for the associated type member.\nIn certain situations, rust automatically inserts derefs …\nThe binders that quantify over the value.\nThe binders that quantify over the value.\nThe kind/universe of the variable.\nThe binders that quantify over the value.\nTrue if this variable is bound within the <code>amount</code> innermost …\nCast a value to type <code>U</code> using <code>CastTo</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns unique placeholders for types and consts contained …\nConstant evaluation details\nConstant evaluation details\nCheck if types unify.\nCheck if types unify eagerly making sure there are no …\nThe home of <code>HirDatabase</code>, which is the Salsa database …\nDebruijn index, which identifies the binder.\nDepth of the De Bruijn index, counting from 0 starting with\nType inference-based diagnostics.\nReturns an iterator over the direct super traits …\nThe <code>HirDisplay</code> trait, which serves two purposes: Turning …\nCompute the dyn-compatibility of a trait\nIf this is a <code>dyn Trait</code>, returns that trait.\nFIXME: Get rid of this, it’s not a good abstraction\nIf overridden to return true, we will panic when a free …\nIf overridden to return true, then visiting will panic if a\nIf overridden to return true, inference variables will …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUtilities for working with generics.\nReturns whether this place has any field (aka. non-deref) …\nIndex <em>in</em> the universe.\nIndex within the binder.\nReturn the index of the bound variable, but only if it is …\nReturn the index of the bound variable, but only if it is …\nGets the visitor’s interner.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFunctions to detect special lang items\nCompute the binary representation of a type\nThis module is concerned with finding methods that a given …\nMIR definitions and implementation\nCreates a new bound variable.\nCreates a new de Bruijn index with a given depth.\nThings relevant to the next trait solver.\nReturn an index of a parameter in the generic type …\nConverts the place to a name that can be inserted into …\nA few helper functions for dealing with primitives.\n‘Canonicalizes’ the <code>t</code> by replacing any errors with new …\nUpdate this index in place by shifting it “in” through …\nUpdate in place by shifting out from <code>amount</code> binders.\nAdjusts the debruijn index (see <code>DebruijnIndex::shifted_in</code>).\nReturns the resulting index when this value is moved into …\nAdjusts the debruijn index (see <code>DebruijnIndex::shifted_in</code>).\nAdds <code>outer_binder</code> levels to the <code>self</code> index. Intuitively, …\nAdjusts the debruijn index (see <code>DebruijnIndex::shifted_in</code>).\nReturns the resulting index when this value is moved out …\nAdjusts the debruijn index (see <code>DebruijnIndex::shifted_in</code>).\nSubtracts <code>outer_binder</code> levels from the <code>self</code> index. …\nCreates a <code>TyBuilder</code> to build <code>Substitution</code> for a coroutine …\nThe substitution for the projection.\nThe substitution, containing both the <code>Self</code> type and the …\nRecursively visits the type contents.\nWraps the bound variable in a constant.\nWrap the bound variable in a lifetime.\nCasts the bound variable to a type.\nThe trait id.\nTrait solving using Chalk.\nNote: Conceptually, it’s thinkable that we could be in a …\nIndex <em>of</em> the universe.\nThe item that is canonicalized.\nTop-level callback: invoked for each <code>Const&lt;I&gt;</code> that is …\nInvoked for each domain goal.\nInvoked for each occurrence of a placeholder type; these …\nInvoked for <code>BoundVar</code> instances that are not bound within …\nInvoked for every goal. By default, recursively visits the …\nInvoked for each occurrence of a inference type; these are …\nTop-level callback: invoked for each <code>Lifetime&lt;I&gt;</code> that is …\nInvoked for every program clause. By default, recursively …\nTop-level callback: invoked for each <code>Ty&lt;I&gt;</code> that is …\nInvoked for each where clause.\nApply the given visitor <code>visitor</code> to <code>self</code>; <code>binders</code> is the …\nTrue if the binder identified by this index is within the …\nContains the type the field resolves to\nWhether the <code>GenericArgs</code> contains a <code>Self</code> arg.\nWhether the <code>GenericArgs</code> contains a <code>Self</code> arg.\nReturns types that <code>ty</code> transitively dereferences to. This …\nExtension trait for <code>Const</code>\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nInterns a constant scalar with the given type\nInterns a constant scalar with the given type\nCalls <code>U::from(self)</code>.\nIs a <code>Const</code> unknown?\nInterns a possibly-unknown target usize\nInterns a constant scalar with the given type\nInterns a possibly-unknown target usize\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis stores the param and its index.\nThis stores the param and its index.\n<code>some_var</code>\n<code>SomeStruct</code>\n<code>SOME_CONST</code>\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>{closure#14825}</code>, useful for some diagnostics (like type …\n<code>{closure#14825}&lt;i32, ()&gt;</code>, useful for internal usage.\nDisplay types for inlays, doc popups, autocompletion, etc…\nErrors that can occur when generating source code\n<code>FmtError</code> is required to be compatible with …\n<code>…</code>, which is the <code>TYPE_HINT_TRUNCATION</code>\n<code>impl FnX(i32, i32) -&gt; i32</code>, where <code>FnX</code> is the most special …\n<code>|i32, i32| -&gt; i32</code>\nDisplay types for inserting them in source files. The …\nOnly for test purpose to keep real types\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe database handle\nReturns a <code>Display</code>able type that is human-readable. Use …\nReturns a <code>Display</code>able type that is human-readable and …\nReturns a String representation of <code>self</code> that can be …\nReturns a String representation of <code>self</code> for test purposes\nReturns a <code>Display</code>able type that is human-readable and …\nReturns a String representation of <code>self</code> that shows the …\nWhen rendering something that has a concept of “children…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a <code>Display</code>able type that is human-readable.\nThis allows using the <code>write!</code> macro directly with a …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a Substitution that replaces each parameter by …\nThe tag directly stores the discriminant, but possibly …\nA type with no valid variants. Must be uninhabited.\nEnum-likes with more than one variant: each variant comes …\nNiche (values invalid for a type) encoding the …\nSingle enum variants, structs/tuples, unions, and all …\nThe <code>backend_repr</code> defines how this data will be represented …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nSays where the fields are located within the layout.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe leaf scalar with the largest number of invalid values …\nThe largest alignment explicitly requested with <code>repr(align)</code>…\nThe randomization seed based on this type’s own repr and …\nThe alignment the type would have, ignoring any <code>repr(align)</code>…\nIs this type known to be uninhabted?\nEncodes information about multi-variant layouts. Even with …\nThis is inbounds of the type of the niche field (not …\nThis range <em>may</em> contain <code>untagged_variant</code> or uninhabited …\nAlways <code>0</code> for types that cannot have multiple variants.\nFilter for results that are visible from the given module\nInclude impls from the given block.\nInherent impls defined in some crate.\nWhether we’re looking up a dotted method call (like …\nLooking up a method call like <code>v.len()</code>: We only consider …\nDo nothing special in regards visibility\nLooking up a path like <code>Vec::new</code> or <code>Vec::default</code>: We …\nTrait impls defined or available in some crate.\nThis is used as a key for indexing impls.\nChecks whether the impl satisfies the orphan rules.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nCreates a TyFingerprint for looking up an inherent impl. …\nQueries all trait impls for the given type.\nQueries all impls of the given trait.\nQueries all impls of <code>trait_</code> that may apply to <code>self_ty</code>.\nCreates a TyFingerprint for looking up a trait impl.\nCreates a TyFingerprint for looking up a trait impl.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nQueries whether <code>self_ty</code> has potentially applicable …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the self parameter of <code>Trait</code> method is the …\nIndicates that the landing pad is finished and that the …\nThe <code>+</code> operator (addition)\nCreates a pointer with the indicated mutability to the …\nCreates an aggregate value, like a tuple or struct.\nThe type is of the element\nEvaluates the operand, which must have type <code>bool</code>. If it is …\n<code>Offset</code> has the same semantics as <code>pointer::offset</code>, except …\nThe <code>&amp;</code> operator (bitwise and)\nThe <code>|</code> operator (bitwise or)\nThe <code>^</code> operator (bitwise xor)\nRoughly speaking, evaluates the <code>func</code> operand and the …\nPerforms essentially all of the casts that can be …\nSame as <code>BinaryOp</code>, but yields <code>(T, bool)</code> with a <code>bool</code> …\nData must be immutable but not aliasable. This kind of …\n?\nConstants are already semantically values, and remain …\nCreates a value by loading the given place.\nA CopyForDeref is equivalent to a read from a place at the …\nIndicates the end of dropping a coroutine.\nComputes the discriminant of the place, returning it as an …\nThe <code>/</code> operator (division)\nThe behavior of this statement differs significantly …\nDrops the place and assigns a new value to it.\nCast into a dyn* object.\nThe <code>==</code> operator (equality)\nA block where control flow only ever takes one real path, …\nA terminator for blocks that only take one path in …\nThe <code>&gt;=</code> operator (greater than or equal to)\nBlock has one successor; we continue execution there.\nThe <code>&gt;</code> operator (greater than)\nSomething that should never happen and is definitely a …\nThese should not occur, usually indicates a bug in mir …\nFIXME: Fold this into InternalError\nThe <code>&lt;=</code> operator (less than or equal to)\nYields the length of the place, as a <code>usize</code>.\nThe <code>&lt;</code> operator (less than)\nCreates a value by performing loading the place, just like …\nThe <code>*</code> operator (multiplication)\nData is mutable and not aliasable.\nStores spans which implies that the local should be …\nThe <code>!=</code> operator (not equal to)\nThe <code>-</code> operator for negation\nThe <code>!</code> operator for logical inversion\nComputes a value as described by the operation.\nThe <code>ptr.offset</code> operator\nAn operand in MIR represents a “value” in Rust, the …\nPointer related casts that are done by coercions.\nAn exposing pointer to address cast. A cast between a …\nAn address-to-pointer cast that picks up an exposed …\nAll sorts of pointer-to-pointer casts. Note that …\nCreates a reference of the indicated kind to the place.\nThe <code>%</code> operator (modulus)\nCreates an array where each element is the value of the …\nReturns from the function.\nThe immediately borrowed place must be immutable, but …\nTransmutes a <code>*mut u8</code> into shallow-initialized <code>Box&lt;T&gt;</code>.\nNON STANDARD: allocates memory with the type’s layout, …\nData must be immutable and is aliasable.\nThe <code>&lt;&lt;</code> operator (shift left)\nThe <code>&gt;&gt;</code> operator (shift right)\nNON STANDARD: This kind of operand returns an immutable …\nThe <code>-</code> operator (subtraction)\nSwitches based on the computed value.\nCreates a pointer/reference to the given thread local.\nTrying to lower a trait function, instead of an …\nThe type is of the tuple\nThis borrow arose from method-call auto-ref (i.e., …\nThis should never happen. Type mismatch should catch …\nExactly like <code>BinaryOp</code>, but less operands.\nMeans that code had undefined behavior. We don’t try to …\nIndicates a terminator that can never be reached.\nIndicates that the landing pad is finished and that the …\nYields the operand unchanged\nMarks a suspend point.\nReturns a slice with all possible jump targets (including …\nThis field stores the closures directly owned by this …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf true, this block lies on an unwind path. This is used …\nReturns an iterator over the switch targets.\nCreates switch targets from an iterator of values and …\nReturns the fallback target that is jumped to when none of …\nList of statements in this block.\nBuilds a switch targets definition that jumps to <code>then</code> if …\nFinds the <code>BasicBlock</code> to which this <code>SwitchInt</code> will branch …\nTerminator for this block.\nArguments the function is called with. These are owned by …\nCleanups to be done if the call unwinds.\nWhere the returned value will be written\nThe discriminant value being tested.\nCleanup to be done if the coroutine is dropped at this …\n<code>true</code> if this is from a call in HIR rather than from an …\nThe function that’s being called.\nA block control flow could conceptually jump to, but won’…\nThe target normal control flow will take.\nThe target normal control flow will take.\nWhere to resume to.\nThe place to store the resume argument in.\nWhere to go after this call returns. If none, the call …\nThe imaginary cleanup block link. This particular path …\nThe value to return.\nAlgebraic data types (ADT). For example: structures, …\nA projection, opaque type, free type alias, or inherent …\nAnalysis includes type inference, checking that items are …\nAn anonymous region parameter for a given fn (&amp;T)\nAn array with the given length. Written as <code>[T; N]</code>.\nThe primitive boolean type. Written as <code>bool</code>.\nThe behavior during MIR borrowck is identical to …\nBound const variable, used only when preparing a trait …\nBound type variable, used to represent the <code>&#39;a</code> in …\nThe primitive character type; holds a Unicode scalar value …\nThe anonymous type of a closure. Used to represent the …\nAnonymous region for the implicit env pointer parameter to …\nWhen checking whether impls overlap, we check whether any …\nSome kind of const inference variable.\nThe anonymous type of a coroutine. Used to represent the …\nThe anonymous type of a closure. Used to represent the …\nA type representing the types stored inside a coroutine. …\nA trait object. Written as …\nA placeholder for a const which could not be computed; …\nA placeholder for a type which could not be computed; this …\nUnevaluated non-const-item, used by …\nA primitive floating-point type. For example, <code>f64</code>.\nFloating-point type variable <code>?F</code> (that can only be unified …\nThe anonymous type of a function declaration/definition. …\nA pointer to a function. Written as <code>fn() -&gt; i32</code>.\nAn unsized FFI type that is opaque to Rust. Written as …\nInfer the value of the const.\nA type variable used during type checking.\nA primitive signed integer type. For example, <code>i32</code>.\nIntegral type variable <code>?I</code> (that can only be unified with …\nThe parameter representation of late-bound function …\nNamed region parameters for functions (a in &amp;’a T)\nThe never type <code>!</code>.\nA const generic parameter.\nA type parameter; for example, <code>T</code> in <code>fn f&lt;T&gt;(x: T) {}</code>.\nA pattern newtype. Takes any type and restricts its valid …\nA placeholder const - universally quantified higher-ranked …\nA placeholder type, used during higher ranked subtyping to …\nA “placeholder” that represents “any const”.\nA “placeholder” that represents “any region”. …\nA “placeholder” that represents “any type”.\nAfter analysis, mostly during codegen and MIR …\nAny analysis after borrowck for a given body should be …\nA raw pointer. Written as <code>*mut T</code> or <code>*const T</code>\nA reference; a pointer with an associated lifetime. …\nRegion variable <code>&#39;?R</code>.\nThe pointee of an array slice. Written as <code>[T]</code>.\nThe pointee of a string slice. Written as <code>str</code>.\nA tuple type. For example, <code>(i32, bool)</code>.\nGeneral type variable <code>?T</code> that can be unified with …\nA primitive unsigned integer type. For example, <code>u32</code>.\nAn unnormalized const item such as an anon const or assoc …\nAn unsafe binder type.\nUsed to hold computed value.\nA type-level constant value.\nABI-related things in the next-trait-solver.\nThe parameters of the associated or opaque type.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe <code>DefId</code> of the <code>TraitItem</code> or <code>ImplItem</code> for the associated …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nFold impls for the next-trait-solver.\nCreates an <code>GenericArgs</code> for generic parameter definitions, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFulfill loop for next-solver.\nThings related to generics in the next-trait-solver.\nFast path helper for testing if a type is <code>Sized</code> or …\nInfer context the next-trait-solver.\nInstantiate the wrapped value, replacing each canonical …\nAllows one to apply a instantiation to some subset of …\nThings related to the Interner in the next-trait-solver.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFast path helper for primitives which are always <code>Copy</code> and …\nThings useful for mapping to/from Chalk and …\nThings related to predicates.\nReturns the <code>Size</code> for primitive types (bool, uint, int, …\nVarious utilities for the next-trait-solver.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA delegate used when instantiating bound vars.\nA simple delegate taking 3 mutable functions. The used …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA trait engine using the new trait solver.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the index of the param on the self generics only …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nwhen projecting an associated type\nTimes when we replace bound regions with existentials:\nEquivalent to <code>ConstKind::Infer(InferConst::Var(_))</code>.\nContains the error value\nwhen a fn is called\nwhen two higher-ranked types are compared\nUsed to configure inference contexts before their creation.\nThis type contains all the things within <code>InferCtxt</code> that …\n<code>InferOk&lt;&#39;tcx, ()&gt;</code> is used a lot. It may seem like a …\nRequires that <code>region</code> must be equal to one of the regions …\nContains the success value\nSee the <code>region_obligations</code> field for more information.\nWhether aliases should be related structurally or not. Used\nEquivalent to <code>Infer(TyVar(_))</code>.\nEquivalent to <code>Infer(FloatVar(_))</code>.\nEquivalent to <code>Infer(IntVar(_))</code>.\nHelper for InferCtxt::ty_or_const_infer_var_changed (see …\nThe trace designates the path through inference that we …\nSee the <code>error_reporting</code> module for more details.\nA nice interface for working with the infcx. The basic …\nGiven a canonical value <code>C</code> as a starting point, create an …\n<strong>Canonicalization</strong> is the key to constructing a query in the …\nCanonicalizes a query value <code>V</code>. When we canonicalize a …\nCanonicalizes a query <em>response</em> <code>V</code>. When we canonicalize a …\nThe options <code>O1..On</code>.\nObtains the latest type of the given closure; this may be a\nProcesses a <code>Coerce</code> predicate from the fulfillment context. …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nExecute <code>f</code> and commit the bindings if closure <code>f</code> returns …\nCreates and return a fresh universe that extends all …\nReplaces all bound variables (lifetimes, types, and …\nReplaces all bound variables (lifetimes, types, and …\nForks the inference context, creating a new inference …\nForks the inference context, creating a new inference …\nGiven a set of generics defined on a type or impl, returns …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe hidden type in which <code>member_region</code> appears: used for …\nCreates an instantiation S for the canonical value with …\nGiven the “info” about a canonical variable, creates a …\nThe idea is that we should ensure that the type variable …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe returned function is used in a fast path. If it …\nThe <code>DefId</code> and args of the opaque type causing this …\nTries to extract an inference variable from a type or a …\nThe region <code>R0</code>.\nJust a convenient wrapper of <code>next_region_var</code> for using …\nJust a convenient wrapper of <code>next_region_var</code> for using …\nCreates a fresh region variable with the next available …\nCreates a fresh region variable with the next available …\nNumber of region variables created so far.\nNumber of type variables created so far.\nResolves a float var to a rigid int type, if it was …\nResolves an int var to a rigid int type, if it was …\nExecute <code>f</code> then unroll any bindings it creates.\nIf <code>TyVar(vid)</code> resolves to a type, return that type. Else, …\nSee <code>README.md</code>.\nRegister <code>AliasRelate</code> obligation(s) that both types must be …\nRegister obligations that must hold in order for this …\nInsert a hidden type into the opaque type storage, making …\nRegister predicates that must hold in order for this …\nThis module contains the definitions of most <code>TypeRelation</code>s …\nThings for resolving vars in the infer context of the …\nWhere possible, replaces type/const variables in <code>value</code> …\nSet the “tainted by errors” flag to true. We call this …\nWhether aliases should be related structurally. This is …\nReturns <code>true</code> if errors have been reported since this infcx …\n<code>ty_or_const_infer_var_changed</code> is equivalent to one of …\nReturn the universe that the region <code>r</code> was created in. For …\nWhether we should define opaque types or just treat them …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nMakes <code>expected == actual</code>.\nMakes <code>expected == actual</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMakes <code>expected &lt;: actual</code>.\nMakes <code>actual &lt;: expected</code>. For example, if type-checking a …\nThis module contains code to canonicalize values into a …\nThis module contains code to instantiate new values into a …\nWhen we canonicalize a value to form a query, we wind up …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMap from the universes that appear in the query to the …\nThis is equivalent to <code>CanonicalVarValues</code>, but using a …\nGiven a set of bounds <code>B</code>, expands to the function:\nGiven a set of bounds <code>B</code>, expands to the function:\nRepresents a constraint that influences the inference …\nSee <code>VerifyIfEq</code> docs\nGiven a region <code>R</code>, true if it is <code>&#39;empty</code>.\nGiven a region <code>R</code>, expands to the function:\nA constraint where neither side is a variable. This does …\nA concrete region is a subregion of region variable.\nThe full set of region constraints gathered up by the …\nA region variable is a subregion of a concrete region. …\nA region variable is a subregion of another.\nDescribes the things that some <code>GenericKind</code> value <code>G</code> is …\nThis is a “conditional bound” that checks the result …\nBound that applies if <code>ty</code> is equal.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nConstraints of the form <code>A &lt;= B</code>, where either <code>A</code> or <code>B</code> can be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this region constraint data contains no …\nConstraints of the form <code>R0 member of [R1, ..., Rn]</code>, …\nResolves a region var to its value in the unification …\nTakes (and clears) the current set of constraints. Note …\nType which must match the generic <code>G</code>\nA “verify” is something that we need to verify after …\nContains the error value\nWe switched our variance because a generic argument occurs …\nNo additional information - this is the default. We will …\nContains the success value\nWhether aliases should be related structurally or not. Used\nExtra information about why we ended up with a particular …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRegister <code>AliasRelate</code> obligation(s) that both types must be …\nRegister obligations that must hold in order for this …\nRegister predicates that must hold in order for this …\nGeneric relation routine suitable for most anything.\nRelate the two args for the given item. The default is to …\nSwitch variance for the purpose of relating <code>a</code> and <code>b</code>.\nWhether aliases should be related structurally. This is …\nRelates <code>a</code> and <code>b</code> structurally, calling the relation for all …\nRelates <code>a</code> and <code>b</code> structurally, calling the relation for all …\nMirrors <code>Variance::xform</code> - used to ‘combine’ the …\nThe index of the generic parameter being used (e.g. <code>0</code> for …\nThe generic type containing the generic parameter that …\nRegister <code>AliasRelate</code> obligation(s) that both types must be …\nRegister obligations that must hold in order for this …\nRegister predicates that must hold in order for this …\nWhether aliases should be related structurally. This is …\nContains the error value\nWe switched our variance because a generic argument occurs …\nNo additional information - this is the default. We will …\nContains the success value\nEnforce that <code>a</code> is equal to or a subtype of <code>b</code>.\nWhether aliases should be related structurally or not. Used\nExtra information about why we ended up with a particular …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGeneric relation routine suitable for most anything.\nRelate the two args for the given item. The default is to …\nSwitch variance for the purpose of relating <code>a</code> and <code>b</code>.\nRelates <code>a</code> and <code>b</code> structurally, calling the relation for all …\nRelates <code>a</code> and <code>b</code> structurally, calling the relation for all …\nThe index of the generic parameter being used (e.g. <code>0</code> for …\nThe generic type containing the generic parameter that …\nThe opportunistic resolver can be used at any time. It …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAsserts this is a struct or union and returns its unique …\nSeparate from <code>ClauseKind::Projection</code> which is used for …\nA marker predicate that is always ambiguous. Used for …\nE.g., <code>Send</code>.\nProve a clause\n<code>T1</code> coerced to <code>T2</code>\nEnsures that a const generic argument to a parameter …\nConstants must be equal. The first component is the const …\nConstant initializer must evaluate successfully.\nTrait must be dyn-compatible.\nEnforces the constness of the predicate we’re calling. …\nThis should only be used inside of the new solver for …\nE.g., <code>Iterator::Item = T</code>.\n<code>where &lt;T as TraitRef&gt;::Name == X</code>, approximately. See the …\n<code>where &#39;a: &#39;r</code>\n<code>T1 &lt;: T2</code>\nE.g., <code>Iterator</code>.\nCorresponds to <code>where Foo: Bar&lt;A, B, C&gt;</code>. <code>Foo</code> here would be …\n<code>where T: &#39;r</code>\nSupport marking impl as unstable.\nNo syntax: <code>T</code> well-formed.\nWhether this projection can be soundly normalized.\nThe parameters of the associated or opaque item.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe <code>DefId</code> of the <code>TraitItem</code> or <code>ImplItem</code> for the associated …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nAssert that the predicate is a clause.\nFlips the polarity of a Predicate.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf polarity is Positive: we are proving that the trait is …\nFinds the max universe present\nThe inverse of <code>BoundVarReplacer</code>: replaces placeholders …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit representation of the discriminant (e.g., <code>-128i8</code> is …\nAdds <code>1</code> to the value and wraps around if the maximum for …\nDifferent signed int types.\nDifferent unsigned int types.\nDifferent kinds of float types.\nDifferent signed int types.\nDifferent unsigned int types.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA set of clauses that we assume to be true. E.g. if we are …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSolve a trait goal using Chalk.")