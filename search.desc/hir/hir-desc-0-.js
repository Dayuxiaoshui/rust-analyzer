searchState.loadedDescShard("hir", 0, "HIR (previously known as descriptors) provides a …\nAbsolute path (::foo)\nThe <code>add</code> lang item.\nThe <code>add_assign</code> lang item.\nA Data Type\nThe <code>align_offset</code> lang item. Align offset for stride != 1; …\nThe <code>alloc_layout</code> lang item.\nGo from <code>*const [T; N]</code> to <code>*const T</code>\nInvariant: <code>inner.as_assoc_item(db).is_some()</code> We do not …\nThe <code>async_fn</code> lang item.\nThe <code>async_fn_mut</code> lang item.\nThe <code>async_fn_once</code> lang item.\nThe <code>async_fn_once_output</code> lang item.\nA procedural attribute macro.\nA built-in attribute macro.\nA template that the attribute input must match. Only …\nDesugared attributes of an item post <code>cfg_attr</code> expansion.\nThe <code>begin_panic</code> lang item. libstd panic entry point. …\nThe <code>bitand</code> lang item.\nThe <code>bitand_assign</code> lang item.\nThe <code>bitor</code> lang item.\nThe <code>bitor_assign</code> lang item.\nThe <code>bitxor</code> lang item.\nThe <code>bitxor_assign</code> lang item.\nTake the address and produce either a <code>&amp;</code> or <code>*</code> pointer.\nThe <code>box_free</code> lang item.\nCauses paths to start with <code>crate</code> where applicable, …\nCauses paths to always start with either <code>self</code>, <code>super</code>, <code>crate</code>…\nThe <code>CStr</code> lang item.\nThe <code>c_void</code> lang item.\nThe <code>call_once_future</code> lang item.\nThe <code>call_ref_future</code> lang item.\nA simple configuration value passed in from the outside.\nConfiguration options used for conditional compilation on …\nThe <code>clone</code> lang item.\nGo from a non-capturing closure to an fn pointer or an …\n<code>{closure#14825}</code>, useful for some diagnostics (like type …\n<code>{closure#14825}&lt;i32, ()&gt;</code>, useful for internal usage.\nThe <code>coerce_unsized</code> lang item.\n?\n<code>#[rust_analyzer::completions(...)]</code> options.\nThe <code>const_panic_fmt</code> lang item.\nA const parameter\nThe <code>const_param_ty</code> lang item.\nThe <code>Context</code> lang item.\nThe <code>Break</code> lang item.\nThe <code>Continue</code> lang item.\nThe <code>copy</code> lang item.\nThe <code>coroutine</code> lang item.\nThe <code>coroutine_return</code> lang item.\nThe <code>coroutine_state</code> lang item.\nThe <code>coroutine_yield</code> lang item.\nhir::Crate describes a single crate. It’s the main …\n<code>macro_rules!</code> or Macros 2.0 macro.\nA built-in function-like macro.\nAn item\nContains the results of (early) name resolution.\nThe defs which have a body.\nMay have a drop glue if some type parameter has it.\nDereference once, producing a place.\nThe <code>deref</code> lang item.\nThe <code>deref_mut</code> lang item.\nThe <code>deref_target</code> lang item.\nA custom derive.\nA builtin-in derive.\nThe <code>destruct</code> lang item.\nThe <code>discriminant_type</code> lang item. The associated item of …\nThe <code>discriminant_kind</code> lang item.\nThe <code>dispatch_from_dyn</code> lang item.\nErrors that can occur when generating source code\nThe <code>div</code> lang item.\nThe <code>div_assign</code> lang item.\nSubset of <code>ide_db::Definition</code> that doc links can resolve to.\n<code>$crate</code> from macro expansion\nThe <code>drop</code> lang item.\nThe <code>drop_in_place</code> lang item.\nThe <code>dyn_metadata</code> lang item.\nThe <code>eh_catch_typeinfo</code> lang item.\nThe <code>eh_personality</code> lang item.\nThe <code>exchange_malloc</code> lang item.\nInvariant: <code>inner.as_extern_assoc_item(db).is_some()</code> We do …\neg. <code>#[cfg(test)]</code>\n<code>FmtError</code> is required to be compatible with …\nThe <code>fn_</code> lang item.\nA fn pointer. Last element of the vector is the return …\nThe <code>fn_mut</code> lang item.\nThe <code>fn_once</code> lang item.\nThe <code>fn_once_output</code> lang item.\nThe <code>fn_ptr_addr</code> lang item.\nThe <code>fn_ptr_trait</code> lang item.\nThe <code>format_alignment</code> lang item.\nThe <code>format_argument</code> lang item.\nThe <code>format_arguments</code> lang item.\nThe <code>format_count</code> lang item.\nThe <code>format_placeholder</code> lang item.\nThe <code>format_unsafe_arg</code> lang item.\nThe <code>freeze</code> lang item.\nThe <code>future_trait</code> lang item.\nThe <code>future_output</code> lang item.\nThe <code>poll</code> lang item.\nThe <code>get_context</code> lang item.\nTrait for obtaining the defining crate of an item.\n<code>…</code>, which is the <code>TYPE_HINT_TRUNCATION</code>\n<code>#[rust_analyzer::completions(ignore_flyimport)]</code>.\n<code>#[rust_analyzer::completions(ignore_flyimport_methods)]</code> …\n<code>#[rust_analyzer::completions(ignore_methods)]</code> (on a trait …\n<code>impl FnX(i32, i32) -&gt; i32</code>, where <code>FnX</code> is the most special …\nSomething that should never happen and is definitely a …\nA wrapper around three booleans\n<code>InFile&lt;T&gt;</code> stores a value of <code>T</code> inside a particular …\nThe <code>index</code> lang item.\nThe <code>index_mut</code> lang item.\nThese should not occur, usually indicates a bug in mir …\nThe <code>into_future</code> lang item.\nThe <code>into_iter</code> lang item.\nFIXME: Fold this into InternalError\nThe <code>iterator</code> lang item.\nThe <code>next</code> lang item.\neg. <code>#[cfg(target_os = &quot;linux&quot;)]</code>\nA representation of all the valid language items in Rust.\nA single local definition.\nA local binding (only value namespace)\nThe <code>manually_drop</code> lang item.\nThe <code>maybe_uninit</code> lang item.\nThe <code>meta_sized</code> lang item.\nThe <code>metadata_type</code> lang item.\nVisibility is restricted to a certain module.\nThe defs which can be visible in the module.\nThe defs which can be visible in the module.\nThe <code>mul</code> lang item.\nThe <code>mul_assign</code> lang item.\nGo from a mut raw pointer to a const raw pointer.\n<code>Name</code> is a wrapper around string, which is used in hir for …\nThe <code>neg</code> lang item.\nGo from ! to any type.\nThe <code>not</code> lang item.\nThe <code>Option</code> lang item.\nThe <code>None</code> lang item.\nThe <code>Some</code> lang item.\nThe <code>Ordering</code> lang item.\nThe <code>owned_box</code> lang item.\nThe <code>panic</code> lang item.\nThe <code>panic_bounds_check</code> lang item.\nThe <code>panic_cannot_unwind</code> lang item.\nThe <code>panic_display</code> lang item.\nThe <code>panic_fmt</code> lang item.\nThe <code>panic_impl</code> lang item.\nThe <code>panic_info</code> lang item.\nThe <code>panic_location</code> lang item.\nThe <code>panic_misaligned_pointer_dereference</code> lang item.\nThe <code>panic_nounwind</code> lang item.\nThe <code>panic_null_pointer_dereference</code> lang item.\nThe <code>eq</code> lang item.\nThe <code>partial_ord</code> lang item.\nThe <code>phantom_data</code> lang item.\nThe <code>pin</code> lang item.\nThe <code>new_unchecked</code> lang item.\nCauses paths to not use a self, super or crate prefix.\nThe <code>pointee_sized</code> lang item.\nThe <code>pointee_trait</code> lang item.\nThe <code>pointer_like</code> lang item.\nThe <code>Poll</code> lang item.\nThe <code>Pending</code> lang item.\nThe <code>Ready</code> lang item.\nA function-like procedural macro.\nVisibility is restricted to the crate.\nVisibility is unrestricted.\n<code>|i32, i32| -&gt; i32</code>\nThe module id of a crate or block root.\nThe <code>Range</code> lang item.\nThe <code>RangeFrom</code> lang item.\nThe <code>RangeFull</code> lang item.\nThe <code>range_inclusive_new</code> lang item.\nThe <code>RangeInclusive</code> lang item.\nThe <code>RangeTo</code> lang item.\nThe <code>RangeToInclusive</code> lang item.\nConverts from T to *T.\nThe <code>receiver</code> lang item.\nThe <code>receiver_target</code> lang item.\nConverts from T to &amp;T.\nGo from a fn-item type to a fn-pointer type.\nThe <code>rem</code> lang item.\nThe <code>rem_assign</code> lang item.\nThe <code>Err</code> lang item.\nThe <code>Ok</code> lang item.\nThe <code>ResumeTy</code> lang item.\nSafe\nWhether a function is safe or not.\nFor IDE only\nPrimary API to get semantic information, like types, from …\n<code>SemanticsScope</code> encapsulates the notion of a scope (the set …\nThe <code>shl</code> lang item.\nThe <code>shl_assign</code> lang item.\nThe <code>shr</code> lang item.\nThe <code>shr_assign</code> lang item.\nThe <code>sized</code> lang item.\nThe <code>slice_len_fn</code> lang item.\nThe <code>start</code> lang item.\nThe <code>String</code> lang item.\nThe <code>structural_peq</code> lang item. Trait injected by …\nThe <code>structural_teq</code> lang item. Trait injected by …\nThe <code>sub</code> lang item.\nThe <code>sub_assign</code> lang item.\n<code>self::</code> is <code>Super(0)</code>\nThe <code>sync</code> lang item.\nThe <code>termination</code> lang item.\nTrying to lower a trait function, instead of an …\nThe <code>transmute_opts</code> lang item.\nThe <code>transmute_trait</code> lang item.\nThe <code>Try</code> lang item.\nThe <code>branch</code> lang item.\nThe <code>from_output</code> lang item.\nThe <code>from_residual</code> lang item.\nThe <code>from_yeet</code> lang item.\nThe <code>tuple_trait</code> lang item.\nThis is used as a key for indexing impls.\nThis should never happen. Type mismatch should catch …\nA type parameter\nCompare ty::Ty\nMeans that code had undefined behavior. We don’t try to …\nThe <code>unpin</code> lang item.\nUnsafe\nThe <code>unsafe_cell</code> lang item.\nGo from a safe fn pointer to an unsafe fn pointer.\nThe <code>unsafe_pinned</code> lang item.\nThe <code>unsize</code> lang item.\nUnsize a pointer/reference value, e.g., <code>&amp;[T; n]</code> to <code>&amp;[T]</code>. …\nThe <code>va_list</code> lang item.\nVisibility of an item, with the path resolved.\nNo <code>#[rust_analyzer::completions(...)]</code>.\nThe adjusted type, or the original in case no adjustments …\nThe adjusted type, if an adjustment happened.\nReturns the name under which this crate is made …\nIf true, paths containing <code>#[unstable]</code> segments may be …\nIterates the ancestors of the given node, climbing up …\nIterates the ancestors of the given node, climbing up …\nIf a type can be represented as <code>dyn Trait</code>, returns all …\nRetrieves all the formatting parts of the format_args! (or …\nIf this path is a single identifier, like <code>foo</code>, return its …\nReturns only defs that have generics from themselves, not …\nReturns the text this name represents if it isn’t a …\nReturns the tuple index this name represents if it is a …\nIterates over associated types that may be specified after …\nReturns types that this type dereferences to (including …\nReturns the type this def’s body has to evaluate to.\nChecks if a trait is in scope, either because of an import …\nRetrieves the formatting part of the format_args! template …\nRetrieves the formatting part of the format_args! template …\nIterates over all child modules.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\n<code>#[rust_analyzer::completions(...)]</code> mode.\nReturns the module containing <code>local_mod</code>, either the parent …\nCheck if type unifies with another type.\nCheck if type unifies with another type eagerly making …\nTopmost parent of this module. Every module has a …\nRe-exports various subcrates databases so that the calling …\nA textual representation of the HIR of this def’s body …\nA textual representation of the MIR of this def’s body …\nReturns a node which declares this module, either a …\nReturns a text range which declares this module, either a …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nReturns a node which defines this module. That is, a file …\nReturns a node which defines this module. That is, a file …\nDescends the token into expansions, returning the tokens …\nDescends the token into expansions, returning the tokens …\nDescends the token into expansions, returning the first …\nMaps a node down by mapping its first and last token down.\nDescends the token into the include expansion, if its file …\nReturns a string describing the kind of this type.\nRe-export diagnostics such that clients of <code>hir</code> don’t …\nFills <code>acc</code> with the module’s diagnostics.\nGet a reference to the def map’s diagnostics.\nReturns a <code>Display</code>able type that is human-readable. Use …\nReturns a <code>Display</code>able type that is human-readable and …\nReturns a String representation of <code>self</code> that can be …\nReturns a String representation of <code>self</code> for test purposes\nReturns a <code>Display</code>able type that is human-readable and …\nReturns a String representation of <code>self</code> that shows the …\nEvaluate the constant.\nEvaluate the static initializer.\nExpands the macro if it isn’t one of the built-in ones …\nIf <code>item</code> has an attribute macro attached to it, expands it.\nReturn expansion information if it is a macro-expansion …\nIs this a function with an <code>export_name</code> of <code>main</code>?\nFind an AstNode by offset inside SyntaxNode, if it is …\nFind an AstNode by offset inside SyntaxNode, if it is …\nFind an AstNode by offset inside SyntaxNode, if it is …\nFinds a path that can be used to refer to the given item …\nFinds a path that can be used to refer to the given item …\nIf not crate is found for the file, try to return the last …\nFold the cfg by querying all basic <code>Atom</code> and <code>KeyValue</code> …\nCreates a TyFingerprint for looking up an inherent impl. …\nCreates a TyFingerprint for looking up a trait impl.\nCreates a TyFingerprint for looking up a trait impl.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>ModPath</code> from a <code>PathKind</code>, with no extra path …\nOpposite of <code>LangItem::name</code>\nOpposite of <code>LangItem::name</code>\nThis does <strong>not</strong> resolve <code>IntoFuture</code>, only <code>Future</code>.\nGenerates a new name that attempts to be unique. Should …\nCombines lifetime indicators, type and constant parameters …\nReturns unique <code>GenericParam</code>s contained in this type.\nTry to get the root URL of the documentation of a crate.\nReturns <code>idx</code>-th argument of this trait reference if it is a …\nWhether this function declaration has a definition.\nReturns whether this place has any field (aka. non-deref) …\nChecks that particular type <code>ty</code> implements <code>std::ops::FnOnce</code>.\nA map of all publicly exported items in a crate.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a <code>Display</code>able type that is human-readable.\nChecks that particular type <code>ty</code> implements …\nResolves the projection <code>&lt;Self as IntoIterator&gt;::IntoIter</code> …\nIs this <code>asm!()</code>, or a variant of it (e.g. <code>global_asm!()</code>)?\nDoes this function have <code>#[bench]</code> attribute?\nReturns true if at least one variant of this enum is a …\nDoes this function have the ignore attribute?\nIs this type parameter implicitly introduced (eg. <code>Self</code> in …\nReturns true if the given input is within a macro call.\nReturns <code>true</code> if the <code>node</code> is inside an <code>unsafe</code> context.\nis this a <code>fn main</code> or a function with an <code>export_name</code> of <code>main</code>…\nReturns true if this is a fake name for things missing in …\nReturns <code>true</code> if the mutability is <code>Mut</code>.\nReturns <code>true</code> if the mutability is <code>Shared</code>.\nDoes this function have <code>#[test]</code> attribute?\nIs this function marked as unstable with <code>#[feature]</code> …\nAllows you to treat inherent and non-inherent methods …\nIterates over inherent methods.\nThis does <strong>not</strong> resolve <code>IntoIterator</code>, only <code>Iterator</code>.\nReturns the crate this module is part of.\nReturns the crate defining this item (or <code>None</code> if <code>self</code> is …\nReturns the number of segments in the path (counting …\nReturns the lifetime of the DataType\nA mapping from <code>hir_expand::MacroDefId</code> to <code>crate::MacroId</code>.\nMIR definitions and implementation\nA fake name for things missing in the source code.\nReturns the module containing <code>self</code> (or <code>self</code>, if <code>self</code> is …\nReturns the <code>SyntaxNode</code> of the module. If this is a file …\nThe modules and their data declared in this crate.\nName of this module.\nFinds nearest non-block ancestor <code>Module</code> (<code>self</code> included).\nWhether this name needs to be escaped in the given edition …\nCreates an instance that’s strongly coupled to its …\nCreates an instance that’s weakly coupled to its …\nThings relevant to the next trait solver.\nThe original type of the expression or pattern.\nAttempts to map the node out of macro expanded files. This …\nFalls back to the macro call range if the node cannot be …\nAttempts to map the syntax node back up its macro calls.\nAttempts to map the syntax node back up its macro calls.\nFalls back to the macro call range if the node cannot be …\nFalls back to the macro call range if the node cannot be …\nAttempts to map the node out of macro expanded files …\nAttempts to map the node out of macro expanded files …\nAttempts to map the node out of macro expanded files. This …\nFinds a parent module.\nIf this <code>DefMap</code> is for a block expression, returns the …\nParses this attribute as a token tree consisting of comma …\nConverts the place to a name that can be inserted into …\nIf true, prefer abs path (starting with <code>::</code>) where it is …\nIf true, prefer to unconditionally use imports of the <code>core</code> …\nIf true, prefer import paths containing a prelude module.\nInserts whitespace and replaces <code>$crate</code> in macro expansions.\nThe leftmost definition for this local. Example: …\nCalls the passed closure <code>f</code> on all names in scope.\nChecks if renaming <code>renamed</code> to <code>new_name</code> may introduce …\nResolves the item <code>link</code> points to in the scope of <code>def</code>.\nAttempts to resolve this call expression as a method call …\nEnv is used to derive the trait environment\nGet this function’s return type\nThis is the same as <code>Self::crate_root</code> for crate def maps, …\nReturns a <code>ModuleScope</code>: a set of items, visible in this …\n#[path(ident)]\nFetches the definition’s source node. Using […\nSearch for a definition’s source and cache its syntax …\nMaps the lowered <code>Attr</code> back to its original syntax node.\nAll definitions for this local. Example: …\nExpand the macro call with a different item as the input, …\nExpand the macro call with a different token tree, mapping …\nResolve a path as-if it was written at the given scope. …\n#[path = “string”]\n#[path = “string”]\nModule defining all known symbols required by the rest of …\nFile symbol extraction.\nTerm search\n#[path TokenTree]\nFIXME: this only lists trait bounds from the item defining …\nReturns the type as in the signature of the struct (i.e., …\nReturns the type as in the signature of the struct.\nTurns this ADT into a type. Any type parameters of the ADT …\nTurns this ADT into a type with the given type parameters. …\nIterates its type and const arguments\nIterates its type arguments\nIt also includes the changes that binding mode makes in …\nThe type of the enum variant bodies.\nNote: <code>VisibleTraits</code> should be treated as an opaque type, …\nVisits every type, including generic arguments, in this …\nWhen there is a generic enum, within the expression …\n<code>some_var</code>\n<code>SomeStruct</code>\n<code>SOME_CONST</code>\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPoints at the name if there are no generics.\nPoints at the name if there are no generics.\nPoints at the name if there are no generics.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis expression is the whole method chain up to and …\nSearch for the name in the associated items only.\nThree possible ways to search for the name in associated …\nImport map entry should strictly match the query string.\nSearch for the name in other items only.\nImport map entry should contain all letters from the query …\nItem import details stored in the <code>ImportMap</code>.\nA map from publicly exported items to its name.\nSearch for the name in both associated and other items.\nImport map entry should match the query string by prefix.\nA way to match import map contents against the search …\nSpecifies whether we want to include associated items in …\nRespect casing of the query string when matching.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe value of <code>#[rust_analyzer::completions(...)]</code>, if exists.\nThe module containing this item.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFuzzy finds items instead of exact matching.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this item is annotated with <code>#[doc(hidden)]</code>.\nWhether this item is annotated with <code>#[unstable(..)]</code>.\nA name that can be used to import the item, relative to …\nSearches dependencies of <code>krate</code> for an importable name …\nIndicates that the landing pad is finished and that the …\nThe <code>+</code> operator (addition)\nCreates a pointer with the indicated mutability to the …\nCreates an aggregate value, like a tuple or struct.\nThe type is of the element\nEvaluates the operand, which must have type <code>bool</code>. If it is …\n<code>Offset</code> has the same semantics as <code>pointer::offset</code>, except …\nThe <code>&amp;</code> operator (bitwise and)\nThe <code>|</code> operator (bitwise or)\nThe <code>^</code> operator (bitwise xor)\nRoughly speaking, evaluates the <code>func</code> operand and the …\nPerforms essentially all of the casts that can be …\nSame as <code>BinaryOp</code>, but yields <code>(T, bool)</code> with a <code>bool</code> …\nData must be immutable but not aliasable. This kind of …\n?\nConstants are already semantically values, and remain …\nCreates a value by loading the given place.\nA CopyForDeref is equivalent to a read from a place at the …\nIndicates the end of dropping a coroutine.\nComputes the discriminant of the place, returning it as an …\nThe <code>/</code> operator (division)\nThe behavior of this statement differs significantly …\nDrops the place and assigns a new value to it.\nCast into a dyn* object.\nThe <code>==</code> operator (equality)\nA block where control flow only ever takes one real path, …\nA terminator for blocks that only take one path in …\nThe <code>&gt;=</code> operator (greater than or equal to)\nBlock has one successor; we continue execution there.\nThe <code>&gt;</code> operator (greater than)\nSomething that should never happen and is definitely a …\nThese should not occur, usually indicates a bug in mir …\nFIXME: Fold this into InternalError\nThe <code>&lt;=</code> operator (less than or equal to)\nYields the length of the place, as a <code>usize</code>.\nThe <code>&lt;</code> operator (less than)\nCreates a value by performing loading the place, just like …\nThe <code>*</code> operator (multiplication)\nData is mutable and not aliasable.\nStores spans which implies that the local should be …\nThe <code>!=</code> operator (not equal to)\nThe <code>-</code> operator for negation\nThe <code>!</code> operator for logical inversion\nComputes a value as described by the operation.\nThe <code>ptr.offset</code> operator\nAn operand in MIR represents a “value” in Rust, the …\nPointer related casts that are done by coercions.\nAn exposing pointer to address cast. A cast between a …\nAn address-to-pointer cast that picks up an exposed …\nAll sorts of pointer-to-pointer casts. Note that …\nCreates a reference of the indicated kind to the place.\nThe <code>%</code> operator (modulus)\nCreates an array where each element is the value of the …\nReturns from the function.\nThe immediately borrowed place must be immutable, but …\nTransmutes a <code>*mut u8</code> into shallow-initialized <code>Box&lt;T&gt;</code>.\nNON STANDARD: allocates memory with the type’s layout, …\nData must be immutable and is aliasable.\nThe <code>&lt;&lt;</code> operator (shift left)\nThe <code>&gt;&gt;</code> operator (shift right)\nNON STANDARD: This kind of operand returns an immutable …\nThe <code>-</code> operator (subtraction)\nSwitches based on the computed value.\nCreates a pointer/reference to the given thread local.\nTrying to lower a trait function, instead of an …\nThe type is of the tuple\nThis borrow arose from method-call auto-ref (i.e., …\nThis should never happen. Type mismatch should catch …\nExactly like <code>BinaryOp</code>, but less operands.\nMeans that code had undefined behavior. We don’t try to …\nIndicates a terminator that can never be reached.\nIndicates that the landing pad is finished and that the …\nYields the operand unchanged\nMarks a suspend point.\nReturns a slice with all possible jump targets (including …\nThis field stores the closures directly owned by this …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf true, this block lies on an unwind path. This is used …\nReturns an iterator over the switch targets.\nCreates switch targets from an iterator of values and …\nReturns the fallback target that is jumped to when none of …\nList of statements in this block.\nBuilds a switch targets definition that jumps to <code>then</code> if …\nFinds the <code>BasicBlock</code> to which this <code>SwitchInt</code> will branch …\nTerminator for this block.\nArguments the function is called with. These are owned by …\nCleanups to be done if the call unwinds.\nWhere the returned value will be written\nThe discriminant value being tested.\nCleanup to be done if the coroutine is dropped at this …\n<code>true</code> if this is from a call in HIR rather than from an …\nThe function that’s being called.\nA block control flow could conceptually jump to, but won’…\nThe target normal control flow will take.\nThe target normal control flow will take.\nWhere to resume to.\nThe place to store the resume argument in.\nWhere to go after this call returns. If none, the call …\nThe imaginary cleanup block link. This particular path …\nThe value to return.\nAlgebraic data types (ADT). For example: structures, …\nA projection, opaque type, free type alias, or inherent …\nSeparate from <code>ClauseKind::Projection</code> which is used for …\nA marker predicate that is always ambiguous. Used for …\nAnalysis includes type inference, checking that items are …\nAn anonymous region parameter for a given fn (&amp;T)\nAn array with the given length. Written as <code>[T; N]</code>.\nE.g., <code>Send</code>.\nThe primitive boolean type. Written as <code>bool</code>.\nThe behavior during MIR borrowck is identical to …\nBound const variable, used only when preparing a trait …\nBound type variable, used to represent the <code>&#39;a</code> in …\nThe primitive character type; holds a Unicode scalar value …\nProve a clause\nThe anonymous type of a closure. Used to represent the …\nAnonymous region for the implicit env pointer parameter to …\n<code>T1</code> coerced to <code>T2</code>\nWhen checking whether impls overlap, we check whether any …\nSome kind of const inference variable.\nEnsures that a const generic argument to a parameter …\nConstants must be equal. The first component is the const …\nConstant initializer must evaluate successfully.\nThe anonymous type of a coroutine. Used to represent the …\nThe anonymous type of a closure. Used to represent the …\nA type representing the types stored inside a coroutine. …\nTrait must be dyn-compatible.\nA trait object. Written as …\nA placeholder for a const which could not be computed; …\nA placeholder for a type which could not be computed; this …\nUnevaluated non-const-item, used by …\nA primitive floating-point type. For example, <code>f64</code>.\nFloating-point type variable <code>?F</code> (that can only be unified …\nThe anonymous type of a function declaration/definition. …\nA pointer to a function. Written as <code>fn() -&gt; i32</code>.\nAn unsized FFI type that is opaque to Rust. Written as …\nEnforces the constness of the predicate we’re calling. …\nInfer the value of the const.\nA type variable used during type checking.\nA primitive signed integer type. For example, <code>i32</code>.\nIntegral type variable <code>?I</code> (that can only be unified with …\nThe parameter representation of late-bound function …\nNamed region parameters for functions (a in &amp;’a T)\nThe never type <code>!</code>.\nThis should only be used inside of the new solver for …\nA const generic parameter.\nA type parameter; for example, <code>T</code> in <code>fn f&lt;T&gt;(x: T) {}</code>.\nA pattern newtype. Takes any type and restricts its valid …\nA placeholder const - universally quantified higher-ranked …\nA placeholder type, used during higher ranked subtyping to …\nA “placeholder” that represents “any const”.\nA “placeholder” that represents “any region”. …\nA “placeholder” that represents “any type”.\nAfter analysis, mostly during codegen and MIR …\nAny analysis after borrowck for a given body should be …\nE.g., <code>Iterator::Item = T</code>.\n<code>where &lt;T as TraitRef&gt;::Name == X</code>, approximately. See the …\nA raw pointer. Written as <code>*mut T</code> or <code>*const T</code>\nA reference; a pointer with an associated lifetime. …\nRegion variable <code>&#39;?R</code>.\n<code>where &#39;a: &#39;r</code>\nThe pointee of an array slice. Written as <code>[T]</code>.\nThe pointee of a string slice. Written as <code>str</code>.\n<code>T1 &lt;: T2</code>\nE.g., <code>Iterator</code>.\nCorresponds to <code>where Foo: Bar&lt;A, B, C&gt;</code>. <code>Foo</code> here would be …\nA tuple type. For example, <code>(i32, bool)</code>.\nGeneral type variable <code>?T</code> that can be unified with …\n<code>where T: &#39;r</code>\nA primitive unsigned integer type. For example, <code>u32</code>.\nAn unnormalized const item such as an anon const or assoc …\nAn unsafe binder type.\nSupport marking impl as unstable.\nUsed to hold computed value.\nA type-level constant value.\nNo syntax: <code>T</code> well-formed.\nABI-related things in the next-trait-solver.\nWhether this projection can be soundly normalized.\nThe parameters of the associated or opaque item.\nThe parameters of the associated or opaque type.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe <code>DefId</code> of the <code>TraitItem</code> or <code>ImplItem</code> for the associated …\nThe <code>DefId</code> of the <code>TraitItem</code> or <code>ImplItem</code> for the associated …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nDefault debug formatting for this struct (may be useful if …\nAssert that the predicate is a clause.\nFlips the polarity of a Predicate.\nFold impls for the next-trait-solver.\nCreates an <code>GenericArgs</code> for generic parameter definitions, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFulfill loop for next-solver.\nThings related to generics in the next-trait-solver.\nFast path helper for testing if a type is <code>Sized</code> or …\nInfer context the next-trait-solver.\nThings related to the Interner in the next-trait-solver.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFast path helper for primitives which are always <code>Copy</code> and …\nThings useful for mapping to/from Chalk and …\nAsserts this is a struct or union and returns its unique …\nIf polarity is Positive: we are proving that the trait is …\nThings related to predicates.\nReturns the <code>Size</code> for primitive types (bool, uint, int, …\nVarious utilities for the next-trait-solver.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA delegate used when instantiating bound vars.\nA simple delegate taking 3 mutable functions. The used …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA trait engine using the new trait solver.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the index of the param on the self generics only …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nwhen projecting an associated type\nTimes when we replace bound regions with existentials:\nEquivalent to <code>ConstKind::Infer(InferConst::Var(_))</code>.\nWhether we should define opaque types or just treat them …\nContains the error value\nwhen a fn is called\nwhen two higher-ranked types are compared\nUsed to configure inference contexts before their creation.\nThis type contains all the things within <code>InferCtxt</code> that …\n<code>InferOk&lt;&#39;tcx, ()&gt;</code> is used a lot. It may seem like a …\nRequires that <code>region</code> must be equal to one of the regions …\nContains the success value\nSee the <code>region_obligations</code> field for more information.\nWhether aliases should be related structurally or not. Used\nEquivalent to <code>Infer(TyVar(_))</code>.\nEquivalent to <code>Infer(FloatVar(_))</code>.\nEquivalent to <code>Infer(IntVar(_))</code>.\nHelper for InferCtxt::ty_or_const_infer_var_changed (see …\nThe trace designates the path through inference that we …\nSee the <code>error_reporting</code> module for more details.\nA nice interface for working with the infcx. The basic …\nGiven a canonical value <code>C</code> as a starting point, create an …\n<strong>Canonicalization</strong> is the key to constructing a query in the …\nCanonicalizes a query value <code>V</code>. When we canonicalize a …\nCanonicalizes a query <em>response</em> <code>V</code>. When we canonicalize a …\nThe options <code>O1..On</code>.\nObtains the latest type of the given closure; this may be a\nProcesses a <code>Coerce</code> predicate from the fulfillment context. …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nExecute <code>f</code> and commit the bindings if closure <code>f</code> returns …\nCreates and return a fresh universe that extends all …\nReplaces all bound variables (lifetimes, types, and …\nReplaces all bound variables (lifetimes, types, and …\nForks the inference context, creating a new inference …\nForks the inference context, creating a new inference …\nGiven a set of generics defined on a type or impl, returns …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe hidden type in which <code>member_region</code> appears: used for …\nCreates an instantiation S for the canonical value with …\nGiven the “info” about a canonical variable, creates a …\nThe idea is that we should ensure that the type variable …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe returned function is used in a fast path. If it …\nThe <code>DefId</code> and args of the opaque type causing this …\nTries to extract an inference variable from a type or a …\nThe region <code>R0</code>.\nJust a convenient wrapper of <code>next_region_var</code> for using …\nJust a convenient wrapper of <code>next_region_var</code> for using …\nCreates a fresh region variable with the next available …\nCreates a fresh region variable with the next available …\nNumber of region variables created so far.\nNumber of type variables created so far.\nResolves a float var to a rigid int type, if it was …\nResolves an int var to a rigid int type, if it was …\nExecute <code>f</code> then unroll any bindings it creates.\nIf <code>TyVar(vid)</code> resolves to a type, return that type. Else, …\nSee <code>README.md</code>.\nRegister <code>AliasRelate</code> obligation(s) that both types must be …\nRegister obligations that must hold in order for this …\nInsert a hidden type into the opaque type storage, making …\nRegister predicates that must hold in order for this …\nThis module contains the definitions of most <code>TypeRelation</code>s …\nThings for resolving vars in the infer context of the …\nWhere possible, replaces type/const variables in <code>value</code> …\nSet the “tainted by errors” flag to true. We call this …\nWhether aliases should be related structurally. This is …\nReturns <code>true</code> if errors have been reported since this infcx …\n<code>ty_or_const_infer_var_changed</code> is equivalent to one of …\nReturn the universe that the region <code>r</code> was created in. For …\nWhether we should define opaque types or just treat them …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nMakes <code>expected == actual</code>.\nMakes <code>expected == actual</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMakes <code>expected &lt;: actual</code>.\nMakes <code>actual &lt;: expected</code>. For example, if type-checking a …\nThis module contains code to canonicalize values into a …\nThis module contains code to instantiate new values into a …\nWhen we canonicalize a value to form a query, we wind up …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMap from the universes that appear in the query to the …\nThis is equivalent to <code>CanonicalVarValues</code>, but using a …\nGiven a set of bounds <code>B</code>, expands to the function:\nGiven a set of bounds <code>B</code>, expands to the function:\nRepresents a constraint that influences the inference …\nSee <code>VerifyIfEq</code> docs\nGiven a region <code>R</code>, true if it is <code>&#39;empty</code>.\nGiven a region <code>R</code>, expands to the function:\nA constraint where neither side is a variable. This does …\nA concrete region is a subregion of region variable.\nThe full set of region constraints gathered up by the …\nA region variable is a subregion of a concrete region. …\nA region variable is a subregion of another.\nDescribes the things that some <code>GenericKind</code> value <code>G</code> is …\nThis is a “conditional bound” that checks the result …\nBound that applies if <code>ty</code> is equal.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nConstraints of the form <code>A &lt;= B</code>, where either <code>A</code> or <code>B</code> can be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this region constraint data contains no …\nConstraints of the form <code>R0 member of [R1, ..., Rn]</code>, …\nResolves a region var to its value in the unification …\nTakes (and clears) the current set of constraints. Note …\nType which must match the generic <code>G</code>\nA “verify” is something that we need to verify after …\nContains the error value\nWe switched our variance because a generic argument occurs …\nNo additional information - this is the default. We will …\nContains the success value\nWhether aliases should be related structurally or not. Used\nExtra information about why we ended up with a particular …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRegister <code>AliasRelate</code> obligation(s) that both types must be …\nRegister obligations that must hold in order for this …\nRegister predicates that must hold in order for this …\nGeneric relation routine suitable for most anything.\nRelate the two args for the given item. The default is to …\nSwitch variance for the purpose of relating <code>a</code> and <code>b</code>.\nWhether aliases should be related structurally. This is …\nRelates <code>a</code> and <code>b</code> structurally, calling the relation for all …\nRelates <code>a</code> and <code>b</code> structurally, calling the relation for all …\nMirrors <code>Variance::xform</code> - used to ‘combine’ the …\nThe index of the generic parameter being used (e.g. <code>0</code> for …\nThe generic type containing the generic parameter that …\nRegister <code>AliasRelate</code> obligation(s) that both types must be …\nRegister obligations that must hold in order for this …\nRegister predicates that must hold in order for this …\nWhether aliases should be related structurally. This is …\nContains the error value\nWe switched our variance because a generic argument occurs …\nNo additional information - this is the default. We will …\nContains the success value\nEnforce that <code>a</code> is equal to or a subtype of <code>b</code>.\nWhether aliases should be related structurally or not. Used\nExtra information about why we ended up with a particular …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGeneric relation routine suitable for most anything.\nRelate the two args for the given item. The default is to …\nSwitch variance for the purpose of relating <code>a</code> and <code>b</code>.\nRelates <code>a</code> and <code>b</code> structurally, calling the relation for all …\nRelates <code>a</code> and <code>b</code> structurally, calling the relation for all …\nThe index of the generic parameter being used (e.g. <code>0</code> for …\nThe generic type containing the generic parameter that …\nThe opportunistic resolver can be used at any time. It …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSeparate from <code>ClauseKind::Projection</code> which is used for …\nA marker predicate that is always ambiguous. Used for …\nE.g., <code>Send</code>.\nProve a clause\n<code>T1</code> coerced to <code>T2</code>\nEnsures that a const generic argument to a parameter …\nConstants must be equal. The first component is the const …\nConstant initializer must evaluate successfully.\nTrait must be dyn-compatible.\nEnforces the constness of the predicate we’re calling. …\nThis should only be used inside of the new solver for …\nE.g., <code>Iterator::Item = T</code>.\n<code>where &lt;T as TraitRef&gt;::Name == X</code>, approximately. See the …\n<code>where &#39;a: &#39;r</code>\n<code>T1 &lt;: T2</code>\nE.g., <code>Iterator</code>.\nCorresponds to <code>where Foo: Bar&lt;A, B, C&gt;</code>. <code>Foo</code> here would be …\n<code>where T: &#39;r</code>\nSupport marking impl as unstable.\nNo syntax: <code>T</code> well-formed.\nThe parameters of the associated or opaque item.\nThe <code>DefId</code> of the <code>TraitItem</code> or <code>ImplItem</code> for the associated …\nIf polarity is Positive: we are proving that the trait is …\nFinds the max universe present\nThe inverse of <code>BoundVarReplacer</code>: replaces placeholders …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBit representation of the discriminant (e.g., <code>-128i8</code> is …\nAdds <code>1</code> to the value and wraps around if the maximum for …\nThe actual data that is stored in the index. It should be …\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe file id for both the <code>ptr</code> and <code>name_ptr</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this symbol is a doc alias for the original symbol.\nThis points to the <code>syntax::ast::Name</code> identifier of the …\nThis points to the whole syntax node of the declaration.\nConstant\nConstant generic parameter\nType tree shows how can we get from set of types to some …\nWell known type (such as <code>true</code> for bool)\nStruct field access\nFunction call (does not take self param)\nLocal variable\nIndicates possibility of many different options that all …\nMethod call (has self param)\nPassing type as reference (with <code>&amp;</code>)\nStatic variable\nStruct construction\nConfiguration options for the term search\nContext for the <code>term_search</code> function\nTuple construction\nEnum variant construction\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nConfiguration for term search\nEnable borrow checking, this guarantees the outputs of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFuel for term search in “units of work”\nGenerate source code for type tree.\nTarget / expected output type\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHelper function to check if outermost type tree is …\nIndicate when to squash multiple trees to <code>Many</code> as there …\nSemantic scope, captures context for the term search\nSemantics for the program\nTerm search\nList the traits used in type tree\nGet type of the type tree.\nThe token cannot join with the following token to form a …\nThe token can join with the following token to form a …\nThe token can join with the following token to form a …\nIndicates whether a token can join with the following …\nThe anchor this span is relative to.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nEquivalent to <code>f(&amp;iter.collect::&lt;Vec&lt;_&gt;&gt;())</code>.\nThe syntax context of the span.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of following token trees that belong to this …\nThe text range of this span, relative to the anchor. We …")